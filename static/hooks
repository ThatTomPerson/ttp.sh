#!/usr/bin/env node

const https = require('https');
const path = require('path');
const fs = require('fs');
const util = require('util')
const mkdir = util.promisify(fs.mkdir)
const writeFile = util.promisify(fs.writeFile)
const chmod = util.promisify(fs.chmod)

const gistId = '7a8127ac306bb2e58c24ba16a521b621';

function get(url) {
  let content = ''
  return new Promise((resolve, reject) => {
    https.get(url, {
      headers: {
        "User-Agent": "node-git-hooks-downloader"
      }
    }, (res) => {
      res.on('data', (data) => {
        content += data;
      })

      res.on('close', () => {
        resolve(content)
      })

      res.on('error', reject)
    })
  })
}

async function writeHook(file, content) {
  const filepath = path.join('.git', 'hooks', file.filename.substr('hook-'.length))

  await writeFile(filepath, content)
  await chmod(filepath, '775')
}

async function writeScript(file, content) {
  const filepath = path.join('.git', 'scripts', file.filename.substr('script-'.length))

  await mkdir(path.join('.git', 'scripts'), { recursive: true })
  await writeFile(filepath, content)
  await chmod(filepath, '775')
}

async function writeGeneric(file, content) {
  const filepath = path.join('.git', file.filename)
  await writeFile(filepath, content)
}

async function write(file) {
  let content = file.content
  if (file.truncated) {
    content = await get(file.raw_url)
  }

  if (file.filename.startsWith('hook-')) {
    return writeHook(file, content)
  }
  if (file.filename.startsWith('script-')) {
    return writeScript(file, content)
  }
  return writeGeneric(file, content)
}

get(`https://api.github.com/gists/${gistId}`)
  .then(content => JSON.parse(content))
  .then(res => res.files)
  .then(files => Promise.all(Object.values(files).map(write)))
